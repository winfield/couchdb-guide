## 独立应用 ##

CouchDB在很多领域都很有用. 因为它的增量MapReduce和复制特性, 使其尤为适合那些在线交互文档和数据管理类的任务. 这些任务是大多数web应用都会遇到的. CouchDB的这些特性再搭配上其HTTP接口使其非常自然的适合于在web应用中使用.

在本章中, 我们会来看一个面向文档的web应用--一个博客的实现. 为了让最多的人可以接受, 我们将会使用古老的纯文本HTML和JavaScript. 这里学到的东西可以同样应用于Django/Rails/Java风格的中间件应用, 甚至是专一的MapReduce数据挖掘任务. CouchDB的API也是一样, 不管你是运行在一个小型单一安装或者是在一个独立的集群上.

对于你应该使用哪个应用开发框架来搭配CouchDB这个问题, 没有一个标准答案. 我们已经看到过用几乎所有常用语言和框架实现的成功应用了. 在这个示例应用里, 我们使用一个两层的架构: CouchDB作为数据层, 浏览器来显现用户界面. 我们认为这是对于许多面向文档应用的一个可行的模型, 而且对于CouchDB教学来说, 也是一个好方法. 因为我们可以简单的认为所有人都会装有一个浏览器, 且不需要假定你熟悉某一种特定的服务器端脚本语言.

### 使用正确的版本 ###

本书的这部分内容是交互式的, 所以准备好你的笔记本和一个运行中的CouchDB数据库. 我们已经把完整的示例程序和源代码放在了网上, 你要做的是把正确版本的示例应用下载下来并把它安装进CouchDB实例里.

写作和发行本书的一个很大挑战是CouchDB本身在以一个很快的速度发展进化. 那些基本概念在很长一段时间里不会改变, 甚至在更为遥远的未来也不会改变很多, 但是那些边边角角的东西却在CouchDB接近版本1.0的过程中快速的演变.

本书的发行版将对应于CouchDB的0.10.0版本. 大多数的代码写于版本0.9.1和将要成为0.10.0的开发分支上. 在这一部分中, 我们会使用其他两个软件包: CouchApp, 它是一个包含编辑和分享CouchDB应用代码的工作集; 以及Sofa, 示例博客应用本身.

请查看http://couchapp.org来获取关于CouchApp模型的最新信息.

读者需要自己寻找这些软件包的正确版本. 对于CouchApp来说, 正确的版本永远是最新的那个版本. 正确版本的Sofa取决于你使用的CouchDB版本. 要知道你使用的CouchDB是什么版本, 运行下面的代码:

				curl http://127.0.0.1:5984

你应该会看到类似下面3行的输出:

				{"couchdb":"Welcome","version":"0.9.1"}

				{"couchdb":"Welcome","version":"0.10.0"}

				{"couchdb":"Welcome","version":"0.11.0a858744"}

这三行对应于版本0.9.1, 0.10.0和Trunk版本. 如果你安装的CouchDB是0.9.1或更早的版本, 你至少应该升级到0.10.0, 因为Sofa使用到了只有0.10.0才有的一些特性. 也有一个老版本的Sofa可以在老版本中运行, 但本书涉及到的特性和API是CouchDB 0.10.0版本的一部分. 在你读到这里时, 可以想像到还会有0.9.2, 0.10.1甚至0.10.2版本. 请使用你喜欢的任一的最新版本.

Trunk代表了在Apache Subversion库中最新CouchDB开发版本. 我们推荐你使用一个已经正式发行的CouchDB版本, 但作为CouchDB的开发者, 我们经常使用的是trunk. Sofa的主分支将会在trunk上开发, 所以如果你想要跑在最前沿, 这会是一个好办法.

### Portable JavaScript ###

如果你不熟悉JavaScript, 我们希望示例代码能给你足够的上下文和解释来让你跟上. 如果你熟悉JavaScript, 你可能已经对于CouchDB支持视图和模版生成JavaScript函数跃跃欲试了.

创建一个可以运行于标准CouchDB实例应用的优势是, 它们可以通过复制实现便携性. 这意味着你的应用, "免费"得到了一个离线的模式. 本地数据对于不同用户有着很大的不同, 我们在这里就不展开了. 我们把那些可以放入一个标准CouchDB的应用叫做CouchDB CouchApps.

CouchApps对于CouchDB教学来说一个极好的容器, 因为我们不需要去担心选择某一语言或框架之类的问题; 我们直接使用CouchDB, 这样读者就能很快的熟悉应用程序模式的整体框架. 当走完整个示例应用, 你将掌握足够的知识来把CouchDB应用到你自己的问题中去. 如果不是很了解Ajax开发, 你会需要学习一点jQuery. 最后我们希望你发现整个过程很轻松.

### 应用即文档 ###

应用被存储为设计文档(图1, "CouchDB运行保存在设计文档里的应用"). 你可以复制设计文档就你复制其他任何在CouchDB里的东西. 因为设计文档可以被复制, 整个CouchApps就能被复制. CouchApps可以通过复制来更新, 也能轻易的被用户"forked", 他们可以随意的修改源代码.

![CouchDB运行保存在设计文档里的应用](standalone/01.png)

图1. CouchDB运行保存在设计文档里的应用

因为应用只是一个特殊类型的文档, 就很容易编辑和分享.

J. Chris说: 讲到基于节点的应用程序让我回想起高中一年级时的事情. 那时候, 我和我的朋友们在仅有的TI-85图形计算器之间分享小程序. 两个计算器之间通过一根小数据线连接, 另外我们还有一张纸制的速查表. 我们玩一个叫Hangman的游戏, 它是一个基于文本的多人冒险游戏, 以我们当时的能力, 大概做出来了一个类似于Doom的克隆.

TI-85的程序是用Basic写的, 所以大家总是会hack其他人所做的东西. 最荒谬的一个程序可能就是Spy Hunter游戏的一个版本了, 它要使用意念来进行控制. 基本的思想就是, 你只要足够的集中注意力, 就可以影响伪随机数的产生, 从而达到控制游戏的目的. 当然最终我们没能做出来. 不管怎么说, 这里的重点在于, 当源代码分享出来可以被其他人访问时, 什么事情都可能会发生.

如果有人不喜欢你的应用的审美观, 他们可以修改CSS. 如果有人不喜欢你的界面设计, 他们可以改进HTML. 如果有人想要修改某些功能, 他们可以编辑JavaScript. 更为极端的, 他们可以完全改变你的应用来适合他们自己的目标. 他们可能会把修改的版本展示给同学和同事看, 并且很有可能的, 也会展示给你看, 这就意味着更多的人会想要做出改进.

作为最初的开发者, 你拥有对源码版本的控制, 可以接受或者拒绝你认为合理的改变. 如果有人在本地应用里搞乱了源代码, 并且超出了可以修复的范围, 他们可以从你的服务器上复制一份最初的代码, 就像图2, "复制应用变更到一个小组的朋友"所示的那样.

![复制应用变更到一个小组的朋友](standalone/02.png)

图2. 复制应用变更到一个小组的朋友

当然, 这也许并不是你想要的. 别担心; 在CouchDB里你想要做多少限制就能做多少限制, 你可以用任意方式来限制到数据的访问, 但要了解你可能会失去的机会. 在开放协作和限制访问之间可以找到一个折中点.

当你安装好后, 就能看到完全的Sofa的代码了, 不仅仅是在文本编辑器里, 还可以在Futon展示的设计文档里.

### 独立的 ###

如果添加了一个HTML文件作为文档的附件会怎么样? 和之前完全一样, CouchDB可以直接作为网页服务器. 当然, 我们可能也需要图片, 样式, 或者脚本. 没问题; 只要把这些资源作为文档的附件添加进来, 然后用相对的URI来链接就行.

让我们后退一步. 到目前为止, 我们有了什么? 一种可以HTML文档和其他静态文件的服务器. 这意味着我们可以使用CouchDB构建和运行传统的网站. 太棒了! 但是这是不是有点重复发明轮子的味道? 好吧, 一个好重要的不同之处在于, 在后台我们还有一个文档数据库. 我们可以使用网页中的JavaScript和这个数据库交互. 现在我们真的可以开工了!

CouchDB的特性是构建一个带有一个强大数据库的独立web应用的基础. 作为证明, 我们不需要别的例子, 只要看看CouchDB内建的管理界面就行. Futon是一个完整的数据库管理应用, 它由HTML, CSS和JavaScript构建. 没有其他的了. CouchDB和web应用是天生一对.

### 已有应用展示 ###

已经有了大量的CouchApps在线了. 这里我们会展示几个网站和应用的截图, 它们都使用了独立的CoucDB应用的这一架构.

Damien Katz, CouchDB的发明者和本书序的作者, 决定看看, 实现一个在服务器变更时, 可以实时更新的共享日历到底要花多少时间. 他大概用了一个下午就实现了, 这要感谢开源的JQuery插件. 这个calender demo仍然运行在J. Chris的服务器上(译注: 现在已经没在运行了:(). 图3, "小组日历".

![小组日历](standalone/03.png)

图3. 小组日历 

Jason Davies把网站Ely Service的后台换成了CouchDB, 而用户根本感觉不到这一变化. 他在其博客里介绍了技术细节. 图4, "Ely Service".

![Ely Service](standalone/04.png)

图4. Ely Service

Jason还把他妈妈的电子商务网站, Bet Ha Bracha, 转换为了一个CouchApp. 它使用了_udpate处理器来整合到另外一个交易网关里. 图5, "Bet Ha Bracha".

Processing JS是一个用于在浏览器中创建动画的工具包. Processing JS Studio是一系列用Processing JS创建的草图组成的展览. 图6, "Processing JS Studio"

![Bet Ha Bracha](standalone/05.png)

图5. Bet Ha Bracha

![Processing JS Studio](standalone/06.png)

图6. Processing JS Studio

Swinger是一个用来创建和分享PPT的CouchApp. 它使用了JavaScript应用框架Sammy. 图7, "Swinger"

![Swinger](standalone/07.png)

图7. Swinger

Nymphormation是Benoît Chesneau写的一个链接分享和标记网站. 它使用了CouchDB的cookie认证, 并且实现了通过复制来分享链接的功能. 图8, "Nymphormation"

Boom Amazing是Alexander Lang写的一个网站, 它可以让你放大缩小, 翻转SVG文件, 记录不同的位置, 然后再把这些变化展现出来或者做一些其他的处理(以上摘自Boom Amazing的README). 图9, "Boom Amazing"

![Nymphormation](standalone/08.png)

图8. Nymphormation

![Boom Amazing](standalone/09.png)

图9. Boom Amazing

### 收尾 ###

J. Chris 决定把他的博客从Ruby on Rails移植到CouchDB. 他开始把Rails的ActiveRecord对象导出为JSON文档, 并在他转换为HTML和JavaScript的过程中, 去掉了一些特性, 又加入了一些其他的特性.

最后的博客引擎拥有的功能有: 登录发帖, 可以防止垃圾评论的开放评论系统, Atom feeds, Markdown格式支持, 以及一些其他的小功能. 这本书不是关于jQuery的, 所以虽然我们使用了这一JavaScript库, 也不会过多的讨论它. 熟悉使用异步XMLHTTPRequest(XHR)的读者应该会觉得这些代码很熟悉. 请注意, 本书的这一部分中所展示的图片和示例代码会忽略了一些细节的东西.

我们将会研究这个应用, 并且学习它是如何使用所有的CouchDB特性的. 在这一部分里所学的技能可以被广泛的应用于任何CouchDB应用, 不管你是准备构建一个独立的CouchApp还是其他类型的应用.

(译注: 本章节中的有些应用展示链接已经失效)
